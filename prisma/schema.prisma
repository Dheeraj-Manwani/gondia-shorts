generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  PUBLISHER
  ADMIN
}

enum ArticleType {
  IMAGE_N_TEXT
  VIDEO_N_TEXT
  FULL_IMAGE
  FULL_VIDEO
  YOUTUBE
  YOUTUBE_SHORTS
}

enum AuthType {
  EMAIL
  GOOGLE
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  number       String?  @unique
  name         String
  password     String?
  salt         String?
  role         Role     @default(USER)
  type         AuthType @default(GOOGLE)
  profilePic   String?
  isRestricted Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  articles     Article[]
  comments     Comment[]
  interactions Interaction[]
  reports      Report[]
}

model Article {
  id             Int         @id @default(autoincrement())
  title          String
  slug           String      @unique
  type           ArticleType
  content        String
  imageUrls      String[]
  videoUrl       String?
  videoStartTime Int? // Start time in seconds for YouTube videos
  source         String
  sourceLogoUrl  String?
  author         String
  isPublic       Boolean     @default(false) // Controls article visibility in feed
  publishedAt    DateTime    @default(now())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // categoryId Int
  // category   Category @relation(fields: [categoryId], references: [id])

  submittedById Int
  submittedBy   User @relation(fields: [submittedById], references: [id])

  likeCount Int @default(0)

  comments     Comment[]
  interactions Interaction[]
  reports      Report[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  articleId Int
  article   Article @relation(fields: [articleId], references: [id])

  authorId Int
  author   User @relation(fields: [authorId], references: [id])

  parentId Int? // for nested replies
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")

  likeCount    Int @default(0)
  dislikeCount Int @default(0)
  repliesCount Int @default(0)

  interactions Interaction[]
  reports      Report[]
}

model Interaction {
  id   Int             @id @default(autoincrement())
  type InteractionType

  userId Int
  user   User @relation(fields: [userId], references: [id])

  articleId Int?
  article   Article? @relation(fields: [articleId], references: [id])

  commentId Int?
  comment   Comment? @relation(fields: [commentId], references: [id])

  createdAt DateTime @default(now())

  // Compound unique constraints
  @@unique([userId, articleId, type])
  @@unique([userId, commentId, type])
}

enum InteractionType {
  LIKE
  SAVE
  DISLIKE
  SHARE
}

enum ReportReason {
  SPAM
  HARASSMENT
  HATE_SPEECH
  MISINFORMATION
  VIOLENCE
  SEXUAL_CONTENT
  PRIVACY_VIOLATION
  COPYRIGHT
  OFF_TOPIC
  OTHER
}

model Report {
  id          Int          @id @default(autoincrement())
  reason      ReportReason
  description String?

  userId Int
  user   User @relation(fields: [userId], references: [id])

  articleId Int?
  article   Article? @relation(fields: [articleId], references: [id])

  commentId Int?
  comment   Comment? @relation(fields: [commentId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, articleId])
  @@unique([userId, commentId])
}
